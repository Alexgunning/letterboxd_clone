import * as Utils from '../../lib/utils';
export declare type PlaygroundSettings = {
    path?: string;
};
export declare type SettingsInput = {
    /**
     * todo
     */
    port?: number;
    /**
     * Host the server should be listening on.
     */
    host?: string | undefined;
    /**
     * Should GraphQL Playground be hosted by the server?
     *
     * @default `false` in production, `{ path: '/' }` otherwise
     *
     * @remarks
     *
     * Useful during development as a visual client to interact with your API. In
     * production, without some kind of security/access control, you will almost
     * certainly want this disabled.
     *
     * To learn more about GraphQL Playgorund see
     * https://github.com/prisma-labs/graphql-playground
     */
    playground?: boolean | PlaygroundSettings;
    /**
     * The path on which the GraphQL API should be served.
     *
     * @default
     * /graphql
     */
    path?: string;
    /**
     * Create a message suitable for printing to the terminal about the server
     * having been booted.
     */
    startMessage?: (address: {
        port: number;
        host: string;
        ip: string;
        path: string;
        playgroundPath?: string;
    }) => void;
};
export declare type SettingsData = Omit<Utils.DeepRequired<SettingsInput>, 'host' | 'playground'> & {
    host: string | undefined;
    playground: false | Required<PlaygroundSettings>;
};
export declare const defaultPlaygroundPath = "/";
export declare const defaultPlaygroundSettings: () => Readonly<Required<PlaygroundSettings>>;
/**
 * The default server options. These are merged with whatever you provide. Your
 * settings take precedence over these.
 */
export declare const defaultSettings: () => Readonly<SettingsData>;
export declare function playgroundSettings(settings: SettingsInput['playground']): SettingsData['playground'];
/**
 * Mutate the settings data
 */
export declare function changeSettings(state: SettingsData, newSettings: SettingsInput): void;
export declare function createServerSettingsManager(): {
    change: (newSettings: SettingsInput) => void;
    reset: () => void;
    data: Readonly<SettingsData>;
};
export declare type ServerSettingsManager = ReturnType<typeof createServerSettingsManager>;
//# sourceMappingURL=settings.d.ts.map