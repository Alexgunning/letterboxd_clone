import * as Process from '../../lib/process';
import * as Utils from '../../lib/utils';
import { log as serverLogger } from './logger';
const log = serverLogger.child('settings');
export const defaultPlaygroundPath = '/';
export const defaultPlaygroundSettings = () => ({
    path: defaultPlaygroundPath,
});
/**
 * The default server options. These are merged with whatever you provide. Your
 * settings take precedence over these.
 */
export const defaultSettings = () => {
    var _a, _b;
    return {
        host: (_b = (_a = process.env.NEXUS_HOST) !== null && _a !== void 0 ? _a : process.env.HOST) !== null && _b !== void 0 ? _b : undefined,
        port: typeof process.env.NEXUS_PORT === 'string'
            ? parseInt(process.env.NEXUS_PORT, 10)
            : typeof process.env.PORT === 'string'
                ? // e.g. Heroku convention https://stackoverflow.com/questions/28706180/setting-the-port-for-node-js-server-on-heroku
                    parseInt(process.env.PORT, 10)
                : process.env.NODE_ENV === 'production'
                    ? 80
                    : 4000,
        startMessage: ({ port, host, path, playgroundPath }) => {
            serverLogger.info('listening', {
                url: `http://${Utils.prettifyHost(host)}:${port}${playgroundPath !== null && playgroundPath !== void 0 ? playgroundPath : path}`,
            });
        },
        playground: process.env.NODE_ENV === 'production' ? false : defaultPlaygroundSettings(),
        path: '/graphql',
    };
};
function playgroundPath(settings) {
    if (settings === true) {
        return defaultPlaygroundPath;
    }
    if (settings.path === undefined) {
        return defaultPlaygroundPath;
    }
    if (settings.path.length === 0) {
        Process.fatal('Custom playground `path` cannot be empty and must start with a "/"');
    }
    if (settings.path.startsWith('/') === false) {
        log.warn('Custom playground `path` must start with a "/". Please add it.');
        return '/' + settings.path;
    }
    return settings.path;
}
export function playgroundSettings(settings) {
    if (!settings) {
        return false;
    }
    return {
        path: playgroundPath(settings),
    };
}
function validateGraphQLPath(path) {
    let outputPath = path;
    if (path.length === 0) {
        Process.fatal('Custom GraphQL `path` cannot be empty and must start with a /');
    }
    if (path.startsWith('/') === false) {
        log.warn('Custom GraphQL `path` must start with a "/". Please add it.');
        outputPath = '/' + outputPath;
    }
    return outputPath;
}
/**
 * Mutate the settings data
 */
export function changeSettings(state, newSettings) {
    const updatedSettings = Object.assign(Object.assign({}, state), newSettings);
    state.playground = playgroundSettings(updatedSettings.playground);
    state.path = validateGraphQLPath(updatedSettings.path);
    state.port = updatedSettings.port;
    state.startMessage = updatedSettings.startMessage;
}
export function createServerSettingsManager() {
    const data = defaultSettings();
    function change(newSettings) {
        changeSettings(data, newSettings);
    }
    function reset() {
        for (const k of Object.keys(data)) {
            delete data[k];
        }
        Object.assign(data, defaultSettings());
    }
    return {
        change,
        reset,
        data,
    };
}
//# sourceMappingURL=settings.js.map