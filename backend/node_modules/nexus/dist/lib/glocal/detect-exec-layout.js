"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.detectExecLayout = void 0;
const tslib_1 = require("tslib");
const fs = tslib_1.__importStar(require("fs"));
const Path = tslib_1.__importStar(require("path"));
const fs_1 = require("../fs");
/**
 * Detect the layout of the bin used for this process, and if there is a local
 * version available.
 */
function detectExecLayout(input) {
    var _a, _b, _c, _d, _e;
    const cwd = (_a = input.cwd) !== null && _a !== void 0 ? _a : process.cwd();
    let thisProcessScriptPath = (_b = input.scriptPath) !== null && _b !== void 0 ? _b : process.argv[1];
    // Node CLI supports omitting the ".js" ext like this: $ node a/b/c/foo
    // Handle that case otherwise the realpathSync below will fail.
    if (Path.extname(thisProcessScriptPath) !== '.js') {
        if (fs.existsSync(thisProcessScriptPath + '.js')) {
            thisProcessScriptPath += '.js';
        }
    }
    // todo try-catch? can we guarantee this? If not, what is the fallback?
    const thisProcessBinRealPath = fs.realpathSync(thisProcessScriptPath);
    const thisProcessBinDir = Path.dirname(thisProcessScriptPath);
    const thisProcessBinRealDir = Path.dirname(thisProcessBinRealPath);
    const thisProcessBinName = Path.basename(thisProcessScriptPath);
    const thisProcessToolBin = {
        name: thisProcessBinName,
        path: thisProcessScriptPath,
        dir: thisProcessBinDir,
        realPath: thisProcessBinRealPath,
        realDir: thisProcessBinRealDir,
    };
    let projectDir = null;
    try {
        projectDir = (_c = fs_1.findFileRecurisvelyUpwardSync('package.json', { cwd })) === null || _c === void 0 ? void 0 : _c.dir;
    }
    catch (e) { }
    if (!projectDir) {
        return {
            nodeProject: false,
            toolProject: false,
            toolCurrentlyPresentInNodeModules: false,
            runningLocalTool: false,
            thisProcessToolBin,
            project: null,
        };
    }
    const projectNodeModulesDir = Path.join(projectDir, 'node_modules');
    const projectBinDir = Path.join(projectNodeModulesDir, '.bin');
    const projectToolBinPath = Path.join(projectBinDir, thisProcessToolBin.name);
    const project = {
        dir: projectDir,
        binDir: projectBinDir,
        nodeModulesDir: projectNodeModulesDir,
        toolBinPath: projectToolBinPath,
        toolBinRealPath: null,
    };
    let isToolProject = null;
    try {
        // todo test that not using Path.posix will break on windows
        isToolProject =
            typeof ((_e = (_d = require(Path.posix.join(projectDir, 'package.json'))) === null || _d === void 0 ? void 0 : _d.dependencies) === null || _e === void 0 ? void 0 : _e[input.depName]) === 'string';
    }
    catch (e) {
        console.log(e);
    }
    if (!isToolProject) {
        return {
            nodeProject: true,
            toolProject: false,
            toolCurrentlyPresentInNodeModules: false,
            runningLocalTool: false,
            thisProcessToolBin,
            project,
        };
    }
    let projectToolBinRealPath = null;
    try {
        projectToolBinRealPath = fs.realpathSync(projectToolBinPath);
    }
    catch (e) { }
    if (!projectToolBinRealPath) {
        return {
            nodeProject: true,
            toolProject: true,
            toolCurrentlyPresentInNodeModules: false,
            runningLocalTool: false,
            thisProcessToolBin,
            project,
        };
    }
    Object.assign(project, {
        toolBinRealPath: projectToolBinRealPath,
    });
    /**
     * Use real path to check if local tool version is being used. This is because
     * some OS's follow symlinks in argv[1] while others do not. Since we create
     * the path to the local tool bin and we don't know (check) which OS we're
     * currently running on, we need some way to normalize both sides so that the
     * check between our constructed path and the process info from OS are
     * comparable at all. Otherwise for example we could end up in a situation
     * like this (bad):
     *
     *    node_modules/.bin/nexus === node_modules/nexus/dist/cli/main.js
     */
    if (thisProcessToolBin.realPath !== project.toolBinRealPath) {
        return {
            nodeProject: true,
            toolProject: true,
            toolCurrentlyPresentInNodeModules: true,
            runningLocalTool: false,
            thisProcessToolBin,
            project,
        };
    }
    return {
        nodeProject: true,
        toolProject: true,
        toolCurrentlyPresentInNodeModules: true,
        runningLocalTool: true,
        thisProcessToolBin,
        project,
    };
}
exports.detectExecLayout = detectExecLayout;
//# sourceMappingURL=detect-exec-layout.js.map