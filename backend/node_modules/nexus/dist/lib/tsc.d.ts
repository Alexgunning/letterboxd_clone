import { Either } from 'fp-ts/lib/Either';
import * as ts from 'typescript';
import { Layout } from './layout';
import { Exception } from './utils';
interface ProgramOptions {
    withCache?: boolean;
}
/**
 * Create a TypeScript program.
 */
export declare function createTSProgram(layout: Layout, options?: ProgramOptions): Either<Exception, ts.EmitAndSemanticDiagnosticsBuilderProgram>;
export declare function deleteTSIncrementalFile(layout: Layout): void;
export declare function getTSIncrementalFilePath(layout: Layout): string;
interface CompileOptions {
    skipTSErrors?: boolean;
    removePreviousBuild?: boolean;
}
/**
 * compile a program. Throws an error if the program does not type check.
 */
export declare function emitTSProgram(builder: ts.EmitAndSemanticDiagnosticsBuilderProgram, layout: Layout, options?: CompileOptions): void;
/**
 * Transpile a TS module to JS.
 */
export declare function transpileModule(input: string, compilerOptions: ts.CompilerOptions): string;
/**
 * Allow node to require TypeScript modules, transpiling them on the fly.
 *
 * @remarks
 *
 * This is strictly about transpilation, no type checking is done.
 */
export declare function registerTypeScriptTranspile(compilerOptions?: ts.CompilerOptions): void;
export {};
//# sourceMappingURL=tsc.d.ts.map