/// <reference types="node" />
import * as NexusLogger from '@nexus/logger';
import * as NexusSchema from '@nexus/schema';
import { GraphQLFieldResolver, GraphQLResolveInfo } from 'graphql';
import * as HTTP from 'http';
import { NexusSchemaStatefulBuilders } from '../../lib/nexus-schema-stateful';
import { RuntimeContributions } from '../../lib/plugin';
import * as Scalars from '../../lib/scalars';
import { Index, MaybePromise } from '../../lib/utils';
import { AppState } from '../app';
import { SchemaSettingsManager } from './settings';
export declare type LazyState = {
    contextContributors: ContextContributor[];
    plugins: NexusSchema.core.NexusPlugin[];
    scalars: Scalars.Scalars;
};
export interface Request extends HTTP.IncomingMessage {
    log: NexusLogger.Logger;
}
export declare type ContextContributor = (req: Request) => MaybePromise<Record<string, unknown>>;
declare type MiddlewareFn = (source: any, args: any, context: NexusSchema.core.GetGen<'context'>, info: GraphQLResolveInfo, next: GraphQLFieldResolver<any, any>) => any;
/**
 * Schema component API
 */
export interface Schema extends NexusSchemaStatefulBuilders {
    /**
     * todo link to website docs
     */
    use(schemaPlugin: NexusSchema.core.NexusPlugin): void;
    /**
     * todo link to website docs
     */
    middleware(fn: (config: NexusSchema.core.CreateFieldResolverInfo) => MiddlewareFn | undefined): void;
    /**
     * todo link to website docs
     */
    addToContext(contextContributor: ContextContributor): void;
}
/**
 * Schema component internal API
 */
export interface SchemaInternal {
    private: {
        settings: SchemaSettingsManager;
        checks(): void;
        assemble(plugins: RuntimeContributions[]): {
            schema: NexusSchema.core.NexusGraphQLSchema;
            missingTypes: Index<NexusSchema.core.MissingType>;
        };
        beforeAssembly(): void;
        reset(): void;
    };
    public: Schema;
}
export declare function create(appState: AppState): SchemaInternal;
export {};
//# sourceMappingURL=schema.d.ts.map