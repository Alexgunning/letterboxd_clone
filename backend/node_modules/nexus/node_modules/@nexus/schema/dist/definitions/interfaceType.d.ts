import { AbstractTypeResolver } from "../typegenTypeHelpers";
import { AbstractOutputDefinitionBuilder, OutputDefinitionBlock } from "./definitionBlocks";
import { NonNullConfig, RootTypingDef } from "./_types";
export declare type NexusInterfaceTypeConfig<TypeName extends string> = {
    name: TypeName;
    definition(t: InterfaceDefinitionBlock<TypeName>): void;
    /**
     * Configures the nullability for the type, check the
     * documentation's "Getting Started" section to learn
     * more about GraphQL Nexus's assumptions and configuration
     * on nullability.
     */
    nonNullDefaults?: NonNullConfig;
    /**
     * The description to annotate the GraphQL SDL
     */
    description?: string | null;
    /**
     * Root type information for this type
     */
    rootTyping?: RootTypingDef;
};
export declare class InterfaceDefinitionBlock<TypeName extends string> extends OutputDefinitionBlock<TypeName> {
    protected typeBuilder: AbstractOutputDefinitionBuilder<TypeName>;
    constructor(typeBuilder: AbstractOutputDefinitionBuilder<TypeName>);
    /**
     * Sets the "resolveType" method for the current type.
     */
    resolveType(fn: AbstractTypeResolver<TypeName>): void;
}
export declare class NexusInterfaceTypeDef<TypeName extends string> {
    readonly name: TypeName;
    protected config: NexusInterfaceTypeConfig<TypeName>;
    constructor(name: TypeName, config: NexusInterfaceTypeConfig<TypeName>);
    get value(): NexusInterfaceTypeConfig<TypeName>;
}
/**
 * Defines a GraphQLInterfaceType
 * @param config
 */
export declare function interfaceType<TypeName extends string>(config: NexusInterfaceTypeConfig<TypeName>): NexusInterfaceTypeDef<TypeName>;
